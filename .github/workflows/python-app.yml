# .github/workflows/build-and-release.yml
name: Build Serial Monitor for All Platforms

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write  # Needed for creating releases

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PySide6==6.5.3
        pip install pyserial==3.5
        pip install pyinstaller==6.1.0
    
    - name: Build Windows executable
      run: |
        pyinstaller --onefile `
          --windowed `
          --name "SerialMonitor" `
          --add-data "settings.json;." `
          --hidden-import "serial.tools.list_ports_windows" `
          --collect-all PySide6 `
          serial_monitor.py
    
    - name: Create Windows installer (optional)
      run: |
        # Create a simple batch installer
        @'
        @echo off
        echo Installing Serial Monitor...
        mkdir "%PROGRAMFILES%\SerialMonitor" 2>nul
        copy SerialMonitor.exe "%PROGRAMFILES%\SerialMonitor\"
        echo Installation complete!
        pause
        '@ | Out-File -FilePath dist\install.bat -Encoding ASCII
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SerialMonitor-Windows
        path: |
          dist/SerialMonitor.exe
          dist/install.bat

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PySide6==6.5.3
        pip install pyserial==3.5
        pip install pyinstaller==6.1.0
    
    - name: Create entitlements file
      run: |
        cat > entitlements.plist << 'EOL'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.device.serial</key>
            <true/>
            <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            <true/>
            <key>com.apple.security.cs.disable-library-validation</key>
            <true/>
        </dict>
        </plist>
        EOL
    
    - name: Build macOS app
      run: |
        pyinstaller --onefile \
          --windowed \
          --name "SerialMonitor" \
          --osx-bundle-identifier "com.devtools.serialmonitor" \
          --osx-entitlements-file entitlements.plist \
          --add-data "settings.json:." \
          --hidden-import "serial.tools.list_ports_osx" \
          --collect-all PySide6 \
          serial_monitor.py
        
        # Create app bundle structure
        mkdir -p "dist/Serial Monitor.app/Contents/MacOS"
        mkdir -p "dist/Serial Monitor.app/Contents/Resources"
        cp dist/SerialMonitor "dist/Serial Monitor.app/Contents/MacOS/"
        
        # Create Info.plist
        cat > "dist/Serial Monitor.app/Contents/Info.plist" << 'EOL'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>SerialMonitor</string>
            <key>CFBundleIdentifier</key>
            <string>com.devtools.serialmonitor</string>
            <key>CFBundleName</key>
            <string>Serial Monitor</string>
            <key>CFBundleVersion</key>
            <string>1.0.0</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0.0</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.13.0</string>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOL
    
    - name: Create DMG installer
      run: |
        # Install create-dmg
        brew install create-dmg
        
        # Create DMG with app
        create-dmg \
          --volname "Serial Monitor" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --app-drop-link 425 120 \
          --no-internet-enable \
          "SerialMonitor.dmg" \
          "dist/"
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SerialMonitor-macOS
        path: |
          SerialMonitor.dmg
          dist/Serial Monitor.app

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-pip
        sudo apt-get install -y libxcb-xinerama0 libxcb-icccm4 libxcb-image0
        sudo apt-get install -y libxcb-keysyms1 libxcb-randr0 libxcb-render-util0
        sudo apt-get install -y libxcb-shape0 libxcb-xfixes0
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PySide6==6.5.3
        pip install pyserial==3.5
        pip install pyinstaller==6.1.0
    
    - name: Build Linux executable
      run: |
        pyinstaller --onefile \
          --windowed \
          --name "serial-monitor" \
          --add-data "settings.json:." \
          --hidden-import "serial.tools.list_ports_linux" \
          --collect-all PySide6 \
          serial_monitor.py
    
    - name: Create AppImage
      run: |
        # Download AppImage tools
        wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy*.AppImage
        
        # Create AppDir structure
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Copy executable
        cp dist/serial-monitor AppDir/usr/bin/
        chmod +x AppDir/usr/bin/serial-monitor
        
        # Create desktop entry
        cat > AppDir/usr/share/applications/serial-monitor.desktop << 'EOL'
        [Desktop Entry]
        Type=Application
        Name=Serial Monitor
        Comment=Professional Serial Monitor for embedded development
        Exec=serial-monitor
        Icon=serial-monitor
        Categories=Development;IDE;Electronics;
        Terminal=false
        EOL
        
        # Create a simple icon (you should replace with actual icon)
        convert -size 256x256 xc:blue AppDir/usr/share/icons/hicolor/256x256/apps/serial-monitor.png || \
        echo "icon" > AppDir/usr/share/icons/hicolor/256x256/apps/serial-monitor.png
        
        # Build AppImage
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage || \
        echo "AppImage creation skipped"
    
    - name: Create .deb package (optional)
      run: |
        # Create debian package structure
        mkdir -p serial-monitor-deb/DEBIAN
        mkdir -p serial-monitor-deb/usr/bin
        mkdir -p serial-monitor-deb/usr/share/applications
        
        # Copy files
        cp dist/serial-monitor serial-monitor-deb/usr/bin/
        cp AppDir/usr/share/applications/serial-monitor.desktop serial-monitor-deb/usr/share/applications/
        
        # Create control file
        cat > serial-monitor-deb/DEBIAN/control << 'EOL'
        Package: serial-monitor
        Version: 1.0.0
        Section: devel
        Priority: optional
        Architecture: amd64
        Maintainer: DevTools Pro
        Description: Professional Serial Monitor
         A comprehensive serial monitoring application for embedded development
        EOL
        
        # Build .deb
        dpkg-deb --build serial-monitor-deb
        mv serial-monitor-deb.deb SerialMonitor-1.0.0-linux-amd64.deb
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SerialMonitor-Linux
        path: |
          dist/serial-monitor
          *.AppImage
          *.deb

  test:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies for testing
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Test with pytest (if tests exist)
      run: |
        pytest || echo "No tests found"
      continue-on-error: true

  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Display structure of downloaded files
      run: ls -la
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Serial Monitor ${{ github.ref_name }}
        body: |
          ## Serial Monitor Release ${{ github.ref_name }}
          
          ### Installation Instructions:
          
          **Windows:**
          - Download `SerialMonitor.exe`
          - Run the executable (may need to allow in Windows Defender)
          
          **macOS:**
          - Download `SerialMonitor.dmg`
          - Mount the DMG and drag to Applications
          - First run: Right-click and select "Open" to bypass Gatekeeper
          
          **Linux:**
          - Download the AppImage and make it executable: `chmod +x *.AppImage`
          - Or install the .deb package: `sudo dpkg -i SerialMonitor*.deb`
          
          ### Changes in this release:
          - See commit history for details
        files: |
          SerialMonitor-Windows/SerialMonitor.exe
          SerialMonitor-macOS/SerialMonitor.dmg
          SerialMonitor-Linux/*.AppImage
          SerialMonitor-Linux/*.deb
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
